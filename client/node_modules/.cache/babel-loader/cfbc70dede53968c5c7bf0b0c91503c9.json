{"ast":null,"code":"const axios = require(\"axios\"); // Change port to be dynamic,\n\n\nlet baseurl = \"http://localhost:4200/api/users/\";\n\nasync function axiosGet(url, _data) {\n  // return axios.get(baseurl+url, { data: {_data}  })\n  // return axios.get(baseurl+url, { data: _data  }, {headers:{'Content-Type':'application/json'}} )\n  return axios.get(baseurl + url, _data, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nasync function axiosPost(url, _data) {\n  return axios.post(baseurl + url, _data, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nasync function login(_username, _password) {\n  // return axiosPost(\"login\", { username:_username, password:_password} )\n  return axiosPost(\"login\", {\n    username: _username,\n    password: _password\n  }).then(res => res.id).catch(err => -1);\n}\n\nasync function new_user(user) {\n  return axiosPost(\"new\", {\n    username: user.username,\n    password: user.password,\n    email: user.email,\n    role_id: user.role_id,\n    points: user.points\n  }).then(ret => {\n    return [0, ret.data.id];\n  }).catch(err => {\n    switch (err.response.status) {\n      case 401:\n        return [1, undefined];\n\n      case 402:\n        return [2, undefined];\n\n      case 403:\n        return [3, undefined];\n\n      default:\n        return err.response.status;\n    }\n  });\n}\n\nasync function reset_password(_email, _test = false) {\n  return axiosPost(\"reset_request\", {\n    email: _email,\n    test: _test\n  }).then(ret => true).catch(ret => false);\n}\n\nasync function reset_token(_token, _newpass) {\n  return axiosPost(\"reset_token\", {\n    token: _token,\n    password: _newpass\n  }).then(res => true).catch(res => false);\n}\n\nasync function reset_url(_token) {\n  return axiosPost(\"reset_url\", {\n    token: _token\n  }).then(res => true).catch(res => false);\n}\n\nexport { axiosPost, axiosGet, login, new_user, reset_password, reset_token, reset_url }; // module.exports= { login,new_user,reset_password, reset_token}","map":{"version":3,"sources":["/mnt/c/Users/klong/Documents/GitHub/Beehive/client/src/api/User.ts"],"names":["axios","require","baseurl","axiosGet","url","_data","get","headers","axiosPost","post","login","_username","_password","username","password","then","res","id","catch","err","new_user","user","email","role_id","points","ret","data","response","status","undefined","reset_password","_email","_test","test","reset_token","_token","_newpass","token","reset_url"],"mappings":"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","sourcesContent":["const axios = require(\"axios\")\r\n// Change port to be dynamic,\r\nlet baseurl = \"http://localhost:4200/api/users/\";\r\n\r\nasync function axiosGet(url:string, _data:any){\r\n        // return axios.get(baseurl+url, { data: {_data}  })\r\n        // return axios.get(baseurl+url, { data: _data  }, {headers:{'Content-Type':'application/json'}} )\r\n\t\treturn axios.get(baseurl+url, _data,{\r\n\t\t\theaders:{ 'Content-Type': 'application/json' }\r\n\t\t})\r\n\r\n\r\n}\r\nasync function axiosPost(url:string, _data:any){\r\n        return axios.post(baseurl+url,   _data , {headers:{'Content-Type':'application/json'}})\r\n}\r\n\r\nasync function login(_username:string, _password:string){\r\n        // return axiosPost(\"login\", { username:_username, password:_password} )\r\n        return axiosPost(\"login\", { username:_username, password:_password} )\r\n        .then(res => res.id)\r\n        .catch(err => -1)\r\n}\r\n\r\n\r\nasync function new_user( user:any ){\r\n    return axiosPost(\"new\",  {\r\n\tusername:user.username,\r\n\tpassword:user.password,\r\n\temail:user.email,\r\n\trole_id:user.role_id,\r\n\tpoints:user.points \r\n    })\r\n\t.then(ret => {return [0, ret.data.id]})\r\n\t.catch((err:any)=>{\r\n\t    switch(err.response.status){\r\n\t\tcase 401:\r\n\t\t    return [1, undefined];\r\n\t\tcase 402:\r\n\t\t    return [2, undefined];\r\n\t\tcase 403:\r\n\t\t    return [3,undefined];\r\n\t\tdefault:\r\n\t\t    return err.response.status\r\n\t    }\r\n\t})\r\n\r\n}\r\n\r\nasync function reset_password(_email:string, _test:boolean=false){\r\n        return axiosPost(\"reset_request\", {email:_email, test:_test})\r\n        .then(ret =>  true )\r\n        .catch(ret => false )\r\n\r\n}\r\n\r\nasync function reset_token(_token:string, _newpass:string){\r\n        return axiosPost(\"reset_token\",{token:_token, password:_newpass} )\r\n        .then(res => true)\r\n        .catch(res => false)\r\n\r\n}\r\nasync function reset_url(_token:string){\r\n        return axiosPost(\"reset_url\",{token:_token} )\r\n        .then(res => true)\r\n        .catch(res => false)\r\n}\r\n\r\nexport {axiosPost,axiosGet,  login,new_user,reset_password, reset_token, reset_url}\r\n// module.exports= { login,new_user,reset_password, reset_token}\r\n\r\n"]},"metadata":{},"sourceType":"module"}